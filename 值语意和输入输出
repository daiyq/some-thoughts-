值语意与引用语意的区别，也有的叫做“深拷贝与浅拷贝”
（以下来自Milo Yip的https://www.zhihu.com/question/36370072）


值语意与对象语意
（以下来自陈硕http://www.cnblogs.com/Solstice/archive/2011/07/17/2108715.html）
不同于标准库其他 class 的“值语意”，iostream 是“对象语意”，即 iostream 是 non-copyable。
这是正确的，因为如果 fstream 代表一个文件的话，拷贝一个 fstream 对象意味着什么呢？表示打开了两个文件吗？
如果销毁一个 fstream 对象，它会关闭文件句柄，那么另一个 fstream copy 对象会因此受影响吗？
C++ 同时支持“数据抽象”和“面向对象编程”，其实主要就是“值语意”与“对象语意”的区别，我发现不是每个人都清楚这一点，这里多说几句。
标准库里的 complex<> 、pair<>、vector<>、 string 等等都是值语意，拷贝之后就与原对象脱离关系，就跟拷贝一个 int 一样。
而我们自己写的 Employee class、TcpConnection class 通常是对象语意，拷贝一个 Employee 对象是没有意义的，一个雇员不会变成两个雇员，他也不会领两份薪水。拷贝 TcpConnection 对象也没有意义，系统里边只有一个 TCP 连接，拷贝 TcpConnection  对象不会让我们拥有两个连接。因此如果在 C++ 里做面向对象编程，写的 class 通常应该禁用 copy constructor 和 assignment operator，比如可以继承 boost::noncopyable。对象语意的类型不能直接作为标准容器库的成员。另一方面，如果要写一个图形程序，其中用到三维空间的向量，那么我们可以写 Vector3D class，它应该是值语意的，允许拷贝，并且可以用作标准容器库的成员，例如 vector<Vector3D> 表示一条三维的折线。
C stdio 的另外一个缺点是 FILE* 可以随意拷贝，但是只要关闭其中一个 copy，其他 copies 也都失效了，跟空悬指针一般。
这其实不光是 C stdio 的缺点，整个 C 语言对待资源（malloc 得到的内存，open() 打开的文件，socket() 打开的连接）都是这样，用整数或指针来代表（即“句柄”）。
而整数和指针类型的“句柄”是可以随意拷贝的，很容易就造成重复释放、遗漏释放、使用已经释放的资源等等常见错误。
这是因为 C 语言错误地让“对象语言”的东西变成了值语意。
iostream 禁止拷贝，利用对象的生命期来明确管理资源（如文件），很自然地就避免了 C 语言易犯的错误。这就是 RAII，一种重要且独特的 C++ 编程手法。

比较以下stdio和iostream的优缺点
stdio缺点：
1.对初学者不友好
2.安全性问题即缓冲区大小
3.类型安全问题即本来是“%d”是整数，但是写的是小整数或者浮点数怎么解释？
4.无法扩展即自己定义的类型无法输出
5.性能：每次都要解析如“%d”的内容，完成从字符串到整数的转换；C语言local负担，也即不同的语言对空白，标点符号有不同的解释。

iostream的第一步
主要在于一个扩展，包含两个含义：一是类型可扩展，即对于自定义对象，iostream可以完成输出，二是可能可扩展，即通过继承iostream来实现自己的stream。
这样就达到了类型安全和类型可扩展。
但是，iostream作死，又增加了许多复杂性。（iostream复杂的继承体系，孟岩评价 “ iostream 最大的缺点是臆造抽象”）
iostream的缺点有：
1.格式化输入非常繁琐
2.外部可配置性比如定义日期的格式“20xx-xx-xx”，stdio保存这个配置就可以，但是ostream就会写死，stdio更加灵活，体现了“数据就是代码”。
（以上两条就是说其不适合搞格式化输入，而格式化输出就会写死）
3.stream的状态，即会影响后续代码
4.通用性。printf等在其他语言中也有类似的，这样比较好理解
5.线程安全性。
stdio 的函数是线程安全的，而且 C 语言还提供了 flockfile(3)/funlockfile(3) 之类的函数来明确控制 FILE* 的加锁与解锁。
iostream 在线程安全方面没有保证，就算单个 operator<< 是线程安全的，也不能保证原子性。
因为 cout << a << b; 是两次函数调用，相当于 cout.operator<<(a).operator<<(b)。
两次调用中间可能会被打断进行上下文切换，造成输出内容不连续，插入了其他线程打印的字符。
而 fprintf(stdout, "%s %d", a, b); 是一次函数调用，而且是线程安全的，打印的内容不会受其他线程影响。
因此，iostream 并不适合在多线程程序中做 logging。


结论：
在 C++ 项目里边自己写个 File class，把项目用到的文件 IO 功能简单封装一下（以 RAII 手法封装 FILE* 或者 file descriptor 都可以，视情况而定），
通常就能满足需要。记得把拷贝构造和赋值操作符禁用，在析构函数里释放资源，避免泄露内部的 handle，这样就能自动避免很多 C 语言文件操作的常见错误。
如果要用 stream 方式做 logging，可以抛开繁重的 iostream 自己写一个简单的 LogStream，重载几个 operator<<，用起来一样方便；
而且可以用 stack buffer，轻松做到线程安全。
